/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    `maven-publish`
    checkstyle
    jacoco
    id("org.springframework.boot") version "2.6.1"
    id("com.monnage.test-report") version "1.4"
    id("org.sonarqube") version "3.3"
}

repositories {
    mavenLocal()
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

dependencies {
    annotationProcessor("org.mapstruct:mapstruct-processor:1.4.2.Final")
    annotationProcessor("org.immutables:value:2.8.8")

    implementation("org.springframework.boot:spring-boot-starter:2.6.1")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb:2.6.1")
    implementation("org.springframework.boot:spring-boot-starter-web:2.6.1")
    implementation("org.mapstruct:mapstruct:1.4.2.Final")
    implementation("org.springdoc:springdoc-openapi-ui:1.6.2")
    implementation("org.springframework.boot:spring-boot-starter-security:2.6.1")
    implementation("org.springframework.security:spring-security-oauth2-resource-server:5.5.1")
    implementation("org.springframework.security:spring-security-oauth2-jose:5.6.0")
    testImplementation("org.springframework.boot:spring-boot-starter-test:2.6.1")
    testImplementation("org.testcontainers:junit-jupiter:1.16.2")
    testImplementation("org.testcontainers:mongodb:1.16.2")
    testImplementation("com.github.dasniko:testcontainers-keycloak:1.9.0")
    testImplementation("io.rest-assured:rest-assured:4.4.0")
    testImplementation("org.springframework.security:spring-security-test:5.5.1")
    compileOnly("org.immutables:value:2.8.8")
}

group = "com.brtvsk"
version = "1.0-SNAPSHOT"
description = "todo-service"
java.sourceCompatibility = JavaVersion.VERSION_17

// JaCoCo
tasks.test {
    val integrationTest = System.getProperty("integrationTest")?.toBoolean() ?: false
    useJUnitPlatform{
        if (integrationTest) includeTags("integration") else excludeTags("integration")
    }
    finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
    configure<JacocoTaskExtension> {
        isEnabled = true
        excludes = listOf()
    }
}
tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
}

//def test = tasks.named("test") {
//    useJUnitPlatform {
//        excludeTags "integration"
//    }
//}

//task<Test>("test") {
//    useJUnitPlatform {
//        excludeTags("integration")
//    }
//    description = "Runs unit tests"
//    group = "verification"
//    testClassesDirs = sourceSets["integrationTest"].output.classesDirs
//    classpath = sourceSets["integrationTest"].runtimeClasspath
//    mustRunAfter(tasks["test"])
//}

//def integrationTest = tasks.register("integrationTest2", Test) {
//    useJUnitPlatform {
//        includeTags "integration"
//    }
//    shouldRunAfter test
//}

//tasks.named("check") {
//    dependsOn(integrationTest)
//}

//sourceSets {
//    test {
//        java {
//            dir = ["test/java/com/brtvsk/todoservice"]
//        }
//    }
//}

//publishing {
//    publications.create<MavenPublication>("maven") {
//        from(components["java"])
//    }
//}

//tasks.withType(JavaCompile::class.java) {
//    doFirst {
//        println("AnnotationProcessorPath for $name is ${options.annotationProcessorPath?.files}")
//    }
//}
//
//tasks.withType<Checkstyle>().configureEach {
//    reports {
//        xml.required.set(false)
//        html.required.set(true)
////        html.stylesheet = resources.text.fromFile("config/xsl/checkstyle-custom.xsl")
//    }
//}



//tasks.withType(JavaCompile) {
//    options.compilerArgs.addAll(['--add-modules', 'java.xml.bind'])
//}